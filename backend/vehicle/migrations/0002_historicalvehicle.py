# Generated by Django 5.2 on 2025-06-12 16:38

import django.core.validators
import django.db.models.deletion
import simple_history.models
import vehicle.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('branch', '0001_initial'),
        ('vehicle', '0001_initial'),
        ('vehiclecategory', '0001_initial'),
        ('vehiclemodel', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalVehicle',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('plate', models.CharField(db_index=True, error_messages={'blank': 'La placa no puede estar vacía.', 'required': 'La placa es un campo obligatorio.', 'unique': 'Esta placa ya está registrada.'}, help_text='Placa única, sin espacios ni caracteres especiales, 6–8 caracteres (ej. ABC1234).', max_length=8, validators=[django.core.validators.RegexValidator(message='La placa debe tener entre 6 y 8 caracteres alfanuméricos en mayúsculas (ej. ABC123D o ABC1234).', regex='^[A-Z0-9]{6,8}$')])),
                ('color', models.CharField(error_messages={'max_length': 'El color no puede tener más de 50 caracteres.', 'required': 'El color del vehículo es obligatorio.'}, help_text='Color del vehículo (máx. 50 caracteres).', max_length=50, validators=[django.core.validators.RegexValidator(message='El color solo debe contener letras y espacios.', regex='^[a-zA-Z\\s]+$')], verbose_name='color')),
                ('year', models.PositiveIntegerField(error_messages={'invalid': 'Ingrese un año válido.', 'required': 'El año de fabricación es obligatorio.'}, help_text='Año de fabricación del vehículo (ej. 2023).', validators=[django.core.validators.MinValueValidator(1886, message='El año de fabricación no puede ser anterior a 1886.'), django.core.validators.MaxValueValidator(vehicle.models.get_next_year, message='El año de fabricación no puede ser mayor al siguiente año del actual.')], verbose_name='año de fabricación')),
                ('engine', models.CharField(blank=True, error_messages={'max_length': 'La descripción del motor no puede tener más de 30 caracteres.'}, help_text='Modelo o cilindrada del motor (ej. ‘2GR-FE’ o ‘1998 cc’). Máx. 30 caracteres. Opcional.', max_length=30, verbose_name='descripción del motor')),
                ('engine_type', models.CharField(choices=[('Gasolina', 'Gasolina'), ('Diesel', 'Diesel'), ('Electrico', 'Eléctrico'), ('Hibrido', 'Híbrido'), ('GLP', 'GLP')], error_messages={'invalid_choice': 'El tipo de motor seleccionado no es una opción válida.', 'required': 'Debe seleccionar un tipo de motor.'}, help_text='Seleccione el tipo de motor.', max_length=10, verbose_name='tipo de motor')),
                ('engine_number', models.CharField(db_index=True, error_messages={'max_length': 'El número de motor no puede tener más de 17 caracteres.', 'required': 'El número de motor es obligatorio.', 'unique': 'Este número de motor ya está registrado.'}, help_text='Número de serie del motor (único, máx. 17 caracteres). Puede ser alfanumérico.', max_length=17, validators=[django.core.validators.RegexValidator(message='El número de motor solo debe contener letras mayúsculas y números.', regex='^[A-Z0-9]+$')], verbose_name='número de motor')),
                ('vin', models.CharField(db_index=True, error_messages={'max_length': 'El VIN debe tener exactamente 17 caracteres.', 'required': 'El VIN es obligatorio.', 'unique': 'Este VIN ya está registrado.'}, help_text='VIN único de 17 caracteres (sin I, O, Q).', max_length=17, validators=[django.core.validators.RegexValidator(message='VIN inválido: debe tener 17 caracteres alfanuméricos y no debe contener las letras I, O, Q.', regex='^[A-HJ-NPR-Z0-9]{17}$')], verbose_name='VIN (Número de Identificación Vehicular)')),
                ('seat_count', models.PositiveIntegerField(error_messages={'invalid': 'Ingrese una cantidad de asientos válida.', 'required': 'La cantidad de asientos es obligatoria.'}, help_text='Número de asientos (incluyendo conductor), entre 1 y 50.', validators=[django.core.validators.MinValueValidator(1, message='La cantidad de asientos debe ser como mínimo 1.'), django.core.validators.MaxValueValidator(50, message='La cantidad de asientos no puede exceder los 50.')], verbose_name='cantidad de asientos')),
                ('daily_price', models.DecimalField(decimal_places=2, error_messages={'invalid': 'Ingrese un precio válido.', 'required': 'El precio de alquiler diario es obligatorio.'}, help_text="Precio del alquiler por día. Use '.' como separador decimal.", max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='El precio diario debe ser mayor que cero.')], verbose_name='precio de alquiler diario')),
                ('description', models.TextField(blank=True, help_text='Cualquier detalle o descripción adicional sobre el vehículo. Opcional.', verbose_name='descripción adicional')),
                ('status', models.CharField(choices=[('Disponible', 'Disponible'), ('En mantenimiento', 'En mantenimiento'), ('En reparacion', 'En reparación'), ('Reservado', 'Reservado'), ('Alquilado', 'Alquilado')], default='Disponible', error_messages={'invalid_choice': 'El estado seleccionado no es una opción válida.', 'required': 'Debe seleccionar un estado para el vehículo.'}, help_text='Seleccione el estado actual del vehículo.', max_length=20, verbose_name='estado del vehículo')),
                ('active', models.BooleanField(default=True, verbose_name='activo')),
                ('created_by', models.IntegerField(blank=True, null=True, verbose_name='creado por')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='fecha de creación')),
                ('modified_by', models.IntegerField(blank=True, null=True, verbose_name='modificado por')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='última modificación')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('branch', models.ForeignKey(blank=True, db_constraint=False, error_messages={'blank': 'Debe seleccionar una sucursal para el vehículo.', 'invalid_choice': 'La sucursal seleccionada no es válida.', 'null': 'El vehículo debe estar asignado a una sucursal.', 'required': 'Debe asignar el vehículo a una sucursal.'}, help_text='Seleccione la sucursal donde se encuentra o a la que está asignado el vehículo.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='branch.branch', verbose_name='sucursal asignada')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('vehiclecategory', models.ForeignKey(blank=True, db_constraint=False, error_messages={'invalid_choice': 'La categoría de vehículo seleccionada no es válida.', 'required': 'Debe seleccionar una categoría de vehículo.'}, help_text='Seleccione la categoría del vehículo.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='vehiclecategory.vehiclecategory', verbose_name='categoría del vehículo')),
                ('vehiclemodel', models.ForeignKey(blank=True, db_constraint=False, error_messages={'invalid_choice': 'El modelo de vehículo seleccionado no es válido.', 'required': 'Debe seleccionar un modelo de vehículo.'}, help_text='Seleccione el modelo del vehículo.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='vehiclemodel.vehiclemodel', verbose_name='modelo del vehículo')),
            ],
            options={
                'verbose_name': 'historical Vehículo',
                'verbose_name_plural': 'historical Vehículos',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
